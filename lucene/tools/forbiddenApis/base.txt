#  Licensed to the Apache Software Foundation (ASF) under one or more
#  contributor license agreements.  See the NOTICE file distributed with
#  this work for additional information regarding copyright ownership.
#  The ASF licenses this file to You under the Apache License, Version 2.0
#  (the "License"); you may not use this file except in compliance with
#  the License.  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

@defaultMessage Spawns threads with vague names; use a custom thread factory (Lucene's NamedThreadFactory, Solr's DefaultSolrThreadFactory) and name threads so that you can tell (by its name) which executor it is associated with
java.util.concurrent.Executors#newFixedThreadPool(int)
java.util.concurrent.Executors#newSingleThreadExecutor()
java.util.concurrent.Executors#newCachedThreadPool()
java.util.concurrent.Executors#newSingleThreadScheduledExecutor()
java.util.concurrent.Executors#newScheduledThreadPool(int)
java.util.concurrent.Executors#defaultThreadFactory()
java.util.concurrent.Executors#privilegedThreadFactory()

@defaultMessage Properties files should be read/written with Reader/Writer, using UTF-8 charset. This allows reading older files with unicode escapes, too.
java.util.Properties#load(java.io.InputStream)
java.util.Properties#save(java.io.OutputStream,java.lang.String)
java.util.Properties#store(java.io.OutputStream,java.lang.String)

@defaultMessage Accessing private members of foreign classes breaks in security-sensitive environments. In addition, it no longer works with Java 9 on runtime classes.
java.lang.reflect.AccessibleObject#setAccessible(boolean)
java.lang.reflect.AccessibleObject#setAccessible(java.lang.reflect.AccessibleObject[],boolean)

java.lang.Character#codePointBefore(char[],int) @ Implicit start offset is error-prone when the char[] is a buffer and the first chars are random chars
java.lang.Character#codePointAt(char[],int) @ Implicit end offset is error-prone when the char[] is a buffer and the last chars are random chars

java.io.File#delete() @ use Files.delete for real exception, IOUtils.deleteFilesIgnoringExceptions if you dont care

java.util.Collections#shuffle(java.util.List) @ Use shuffle(List, Random) instead so that it can be reproduced

# START: forbidden-apis patch
# TODO: remove this once forbidden-apis was updated to next version with following commit:
# https://github.com/policeman-tools/forbidden-apis/commit/c34a02afcd7856478e9adfd32be2fc5bf82ca268

@defaultMessage Uses default time zone
java.time.LocalDateTime#now()
java.time.LocalDate#now()
java.time.LocalTime#now()
java.time.OffsetDateTime#now()
java.time.OffsetTime#now()
java.time.Year#now()
java.time.YearMonth#now()
java.time.MonthDay#now()
java.time.chrono.Chronology#dateNow()
java.time.chrono.HijrahChronology#dateNow()
java.time.chrono.JapaneseChronology#dateNow()
java.time.chrono.MinguoChronology#dateNow()
java.time.chrono.ThaiBuddhistChronology#dateNow()
java.time.chrono.IsoChronology#dateNow()
java.time.chrono.HijrahDate#now()
java.time.chrono.JapaneseDate#now()
java.time.chrono.MinguoDate#now()
java.time.chrono.ThaiBuddhistDate#now()

@defaultMessage Uses default locale
java.time.format.DateTimeFormatterBuilder#toFormatter(java.time.format.ResolverStyle,java.time.chrono.Chronology)
java.time.format.DateTimeFormatter#ofLocalizedDate(java.time.format.FormatStyle)
java.time.format.DateTimeFormatter#ofLocalizedDateTime(java.time.format.FormatStyle,java.time.format.FormatStyle)
java.time.format.DateTimeFormatter#ofLocalizedDateTime(java.time.format.FormatStyle)
java.time.format.DateTimeFormatter#ofLocalizedTime(java.time.format.FormatStyle)
java.time.format.DateTimeFormatter#ofPattern(java.lang.String)

# END: forbidden-apis patch